# bot/handlers/admin/paylink.py
from __future__ import annotations

import re
import logging
from typing import Optional, Dict

from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from config.settings import Settings
from bot.services.yookassa_service import YooKassaService

router = Router(name="admin_paylink_router")

# –ü–µ—Ä–∏–æ–¥—ã: –∞–ª–∏–∞—Å—ã -> —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤
PERIOD_MAP = {"1m": 1, "3m": 3, "6m": 6, "12m": 12}

# –ö—ç—à –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ YooKassa
_yk_service_singleton: Optional[YooKassaService] = None


def _get_yk_service(settings: Settings, bot_username: Optional[str]) -> YooKassaService:
    global _yk_service_singleton
    if _yk_service_singleton is None:
        _yk_service_singleton = YooKassaService(
            shop_id=settings.YOOKASSA_SHOP_ID,
            secret_key=settings.YOOKASSA_SECRET_KEY,
            configured_return_url=getattr(settings, "YOOKASSA_RETURN_URL", None),
            bot_username_for_default_return=bot_username,
            settings_obj=settings,
        )
    return _yk_service_singleton


def _is_admin(user_id: int, settings: Settings) -> bool:
    admin_ids = (
        getattr(settings, "ADMIN_TG_IDS", None)
        or getattr(settings, "ADMIN_IDS", None)
        or []
    )
    try:
        return int(user_id) in {int(x) for x in admin_ids}
    except Exception:
        return False


def _parse_cmd(text: str) -> Optional[Dict]:
    """
    /paylink <panel_username> <period> [comment ...] amount=XXXX [ttl=MIN]

    –ü—Ä–∏–º–µ—Ä:
      /paylink ivanov 3m –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ amount=1990 ttl=90
      /paylink 123456 12m –ö–ª–∏–µ–Ω—Ç —Å —á–∏—Å–ª–æ–≤—ã–º –Ω–∏–∫–æ–º amount=4990
    """
    if not text:
        return None
    parts = text.strip().split(maxsplit=3)
    if len(parts) < 3:
        return None

    _, username, period = parts[:3]
    rest = parts[3] if len(parts) == 4 else ""

    username = username.lower().strip()
    if period not in PERIOD_MAP:
        return None

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
    amount_override: Optional[float] = None
    ttl_minutes: Optional[int] = None

    amount_match = re.search(r"(?:^|\s)amount=(\d+(?:[.,]\d{1,2})?)\b", rest)
    ttl_match = re.search(r"(?:^|\s)ttl=(\d{1,5})\b", rest)

    if amount_match:
        amount_str = amount_match.group(1).replace(",", ".")
        try:
            amount_override = float(amount_str)
        except ValueError:
            amount_override = None
        rest = (rest[:amount_match.start()] + rest[amount_match.end():]).strip()

    if ttl_match:
        try:
            ttl_minutes = int(ttl_match.group(1))
        except ValueError:
            ttl_minutes = None
        rest = (rest[:ttl_match.start()] + rest[ttl_match.end():]).strip()

    comment = rest.strip() or None

    return {
        "username": username,
        "period": period,
        "comment": comment,
        "amount": amount_override,
        "ttl_minutes": ttl_minutes,
    }


@router.message(Command("paylink"))
async def cmd_paylink(
    message: types.Message,
    session: AsyncSession,
    settings: Settings,
):
    """
    –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É YooKassa –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ username –∏–∑ –ø–∞–Ω–µ–ª–∏.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å amount=...
    """
    if not _is_admin(message.from_user.id, settings):
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    parsed = _parse_cmd(message.text or "")
    if not parsed:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/paylink <panel_username> <period> [comment] amount=XXXX [ttl=MIN]\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "  /paylink ivanov 3m –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ amount=1990 ttl=90\n"
            "  /paylink 123456 12m –ö–ª–∏–µ–Ω—Ç —Å —á–∏—Å–ª–æ–≤—ã–º –Ω–∏–∫–æ–º amount=4990"
        )
        return

    username: str = parsed["username"]
    period: str = parsed["period"]
    comment: Optional[str] = parsed["comment"]
    amount_rub: Optional[float] = parsed["amount"]
    ttl_minutes: int = parsed["ttl_minutes"] or 120
    months = PERIOD_MAP[period]

    if amount_rub is None:
        await message.answer(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"/paylink {username} {period} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π amount=1990"
        )
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
    bot_username = message.bot.username if hasattr(message.bot, "username") else None
    yk = _get_yk_service(settings, bot_username)

    try:
        result = await yk.create_admin_payment_link(
            tg_id=0,  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            period=period,
            amount_rub=amount_rub,
            comment=comment,
            ttl_minutes=ttl_minutes,
            receipt_email=None,
            receipt_phone=None,
            return_url_override=None,
            extra_metadata={
                "months": months,
                "admin_initiator_id": str(message.from_user.id),
                "source": "admin_link",
                "id_type": "panel_username",
                "username": username,
            },
        )
    except Exception as e:
        logging.exception("create_admin_payment_link failed")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return

    if not result or not result.get("confirmation_url"):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏).")
        return

    url = result["confirmation_url"]

    await message.answer(
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n"
        f"üë§ username (–ø–∞–Ω–µ–ª—å): <b>{username}</b>\n"
        f"üì¶ –ø–µ—Ä–∏–æ–¥: <b>{period}</b>\n"
        f"üí∞ —Å—É–º–º–∞: <b>{amount_rub:.2f} RUB</b>\n"
        f"‚è≥ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ~{ttl_minutes} –º–∏–Ω.\n"
        + (f"üìù –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment}</i>\n" if comment else "")
        + "\n"
        f"{url}",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )
