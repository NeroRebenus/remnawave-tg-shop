# bot/handlers/admin/paylink.py
from __future__ import annotations

import re
import logging
from typing import Optional, Dict

from aiogram import Router, types, F
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from config.settings import Settings
from bot.middlewares.i18n import JsonI18n

from db.dal.pricing import get_or_init_user_price_plan
from bot.services.yookassa_service import YooKassaService

router = Router(name="admin_paylink_router")

# –ü–µ—Ä–∏–æ–¥—ã: –∞–ª–∏–∞—Å—ã -> —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤
PERIOD_MAP = {"1m": 1, "3m": 3, "6m": 6, "12m": 12}

# –ö—ç—à –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å SDK –∫–∞–∂–¥—ã–π —Ä–∞–∑
_yk_service_singleton: Optional[YooKassaService] = None


def _get_yk_service(settings: Settings, bot_username: Optional[str]) -> YooKassaService:
    global _yk_service_singleton
    if _yk_service_singleton is None:
        _yk_service_singleton = YooKassaService(
            shop_id=settings.YOOKASSA_SHOP_ID,
            secret_key=settings.YOOKASSA_SECRET_KEY,
            configured_return_url=getattr(settings, "YOOKASSA_RETURN_URL", None),
            bot_username_for_default_return=bot_username,
            settings_obj=settings,
        )
    return _yk_service_singleton


def _is_admin(user_id: int, settings: Settings) -> bool:
    # –ü–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    admin_ids = (
        getattr(settings, "ADMIN_TG_IDS", None)
        or getattr(settings, "ADMIN_IDS", None)
        or []
    )
    try:
        return int(user_id) in {int(x) for x in admin_ids}
    except Exception:
        return False


def _parse_cmd(text: str) -> Optional[Dict]:
    """
    –ü–∞—Ä—Å–∏–º:
      /paylink <tg_id> <period> [comment ...] [amount=XXXX] [ttl=MIN]

    –ü—Ä–∏–º–µ—Ä:
      /paylink 123456789 3m –ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω amount=1990 ttl=90
    """
    if not text:
        return None
    parts = text.strip().split(maxsplit=3)
    if len(parts) < 3:
        return None
    _, tg_id_str, period = parts[:3]
    rest = parts[3] if len(parts) == 4 else ""

    try:
        tg_id = int(tg_id_str)
    except ValueError:
        return None
    if period not in PERIOD_MAP:
        return None

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ö–≤–æ—Å—Ç–µ
    amount_override: Optional[float] = None
    ttl_minutes: Optional[int] = None

    # –ò—â–µ–º amount=XXXX –∏ ttl=YYY –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    amount_match = re.search(r"(?:^|\s)amount=(\d+(?:[.,]\d{1,2})?)\b", rest)
    ttl_match = re.search(r"(?:^|\s)ttl=(\d{1,5})\b", rest)

    if amount_match:
        amount_str = amount_match.group(1).replace(",", ".")
        try:
            amount_override = float(amount_str)
        except ValueError:
            amount_override = None
        # –≤—ã—Ä–µ–∑–∞–µ–º –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        rest = (rest[:amount_match.start()] + rest[amount_match.end():]).strip()

    if ttl_match:
        try:
            ttl_minutes = int(ttl_match.group(1))
        except ValueError:
            ttl_minutes = None
        rest = (rest[:ttl_match.start()] + rest[ttl_match.end():]).strip()

    comment = rest.strip() or None

    return {
        "tg_id": tg_id,
        "period": period,
        "comment": comment,
        "amount_override": amount_override,
        "ttl_minutes": ttl_minutes,
    }


def _price_from_plan(user_plan, months: int) -> Optional[float]:
    """
    –ü–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –≤ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∞–π—Å–∞.
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è (–ø—Ä–∏–º–µ—Ä):
      rub_price_1_month, rub_price_3_months, rub_price_6_months, rub_price_12_months
    """
    mapping = {
        1: getattr(user_plan, "rub_price_1_month", None),
        3: getattr(user_plan, "rub_price_3_months", None),
        6: getattr(user_plan, "rub_price_6_months", None),
        12: getattr(user_plan, "rub_price_12_months", None),
    }
    val = mapping.get(months)
    if val is None:
        return None
    try:
        return float(val)
    except Exception:
        return None


@router.message(Command("paylink"))
async def cmd_paylink(
    message: types.Message,
    session: AsyncSession,
    i18n: JsonI18n,
    settings: Settings,
):
    """
    –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É YooKassa –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ tg_id –∏ –ø–µ—Ä–∏–æ–¥—É.
    –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
      /paylink <tg_id> <period> [comment] [amount=XXXX] [ttl=MIN]
    –ü–µ—Ä–∏–æ–¥—ã:
      1m, 3m, 6m, 12m
    """
    # 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not _is_admin(message.from_user.id, settings):
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    parsed = _parse_cmd(message.text or "")
    if not parsed:
        return await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/paylink <tg_id> <period> [comment] [amount=XXXX] [ttl=MIN]\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "  /paylink 123456789 3m –ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω\n"
            "  /paylink 123456789 12m VIP –∫–ª–∏–µ–Ω—Ç amount=4990 ttl=180"
        )

    tg_id = parsed["tg_id"]
    period = parsed["period"]
    comment = parsed["comment"]
    amount_override = parsed["amount_override"]
    ttl_minutes = parsed["ttl_minutes"] or 120

    months = PERIOD_MAP[period]

    # 1) –ü—Ä–∞–π—Å-–ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)
    user_plan = await get_or_init_user_price_plan(session, tg_id)
    if not user_plan:
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å-–ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    # 2) –¶–µ–Ω–∞: –∏–∑ –ø–ª–∞–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è
    amount_rub: Optional[float] = amount_override or _price_from_plan(user_plan, months)
    if amount_rub is None:
        return await message.answer("–¶–µ–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ YooKassa
    bot_username = message.bot.username if hasattr(message.bot, "username") else None
    yk = _get_yk_service(settings, bot_username)

    # 4) –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ —Å confirmation_url
    try:
        result = await yk.create_admin_payment_link(
            tg_id=tg_id,
            period=period,
            amount_rub=amount_rub,
            comment=comment,
            ttl_minutes=ttl_minutes,
            # –ï—Å–ª–∏ —É —Ç–µ–±—è –≤ –∞–¥–º–∏–Ω–∫–µ –µ—Å—Ç—å –º–µ–π–ª –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –ø–µ—Ä–µ–¥–∞–π –µ–≥–æ —Å—é–¥–∞:
            receipt_email=None,
            receipt_phone=None,
            # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å return_url –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
            return_url_override=None,
            extra_metadata={
                "months": months,
                "admin_initiator_id": str(message.from_user.id),
            },
        )
    except Exception as e:
        logging.exception("create_admin_payment_link failed")
        return await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")

    if not result or not result.get("confirmation_url"):
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏).")

    url = result["confirmation_url"]
    await message.answer(
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n"
        f"üë§ tg_id: <code>{tg_id}</code>\n"
        f"üì¶ –ø–µ—Ä–∏–æ–¥: <b>{period}</b>\n"
        f"üí∞ —Å—É–º–º–∞: <b>{amount_rub:.2f} RUB</b>\n"
        f"‚è≥ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ~{ttl_minutes} –º–∏–Ω.\n"
        + (f"üìù –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment}</i>\n" if comment else "")
        + "\n"
        f"{url}",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )