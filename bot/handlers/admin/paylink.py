# bot/handlers/admin/paylink.py
from __future__ import annotations

import re
import logging
from typing import Optional, Dict, Union

from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from config.settings import Settings

from db.dal.pricing import get_or_init_user_price_plan
from bot.services.yookassa_service import YooKassaService

router = Router(name="admin_paylink_router")

# –ü–µ—Ä–∏–æ–¥—ã: –∞–ª–∏–∞—Å—ã -> —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤
PERIOD_MAP = {"1m": 1, "3m": 3, "6m": 6, "12m": 12}

# –ö—ç—à –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å SDK –∫–∞–∂–¥—ã–π —Ä–∞–∑
_yk_service_singleton: Optional[YooKassaService] = None


def _get_yk_service(settings: Settings, bot_username: Optional[str]) -> YooKassaService:
    global _yk_service_singleton
    if _yk_service_singleton is None:
        _yk_service_singleton = YooKassaService(
            shop_id=settings.YOOKASSA_SHOP_ID,
            secret_key=settings.YOOKASSA_SECRET_KEY,
            configured_return_url=getattr(settings, "YOOKASSA_RETURN_URL", None),
            bot_username_for_default_return=bot_username,
            settings_obj=settings,
        )
    return _yk_service_singleton


def _is_admin(user_id: int, settings: Settings) -> bool:
    admin_ids = (
        getattr(settings, "ADMIN_TG_IDS", None)
        or getattr(settings, "ADMIN_IDS", None)
        or []
    )
    try:
        return int(user_id) in {int(x) for x in admin_ids}
    except Exception:
        return False


def _parse_cmd(text: str) -> Optional[Dict[str, Union[int, str, float, None]]]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
      /paylink <tg_id|@username> <period> [comment ...] [amount=XXXX] [ttl=MIN]

    –ü—Ä–∏–º–µ—Ä—ã:
      /paylink 123456789 3m –ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω amount=1990 ttl=90
      /paylink @panel_nick 6m –û–ø–ª–∞—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ amount=3490
    """
    if not text:
        return None
    parts = text.strip().split(maxsplit=3)
    if len(parts) < 3:
        return None

    _, id_part, period = parts[:3]
    rest = parts[3] if len(parts) == 4 else ""

    # id_part –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º (tg_id) –∏–ª–∏ –Ω–∏–∫–æ–º (@username / username)
    tg_id: Optional[int] = None
    username: Optional[str] = None
    try:
        tg_id = int(id_part)
    except ValueError:
        username = id_part.lstrip("@").lower()

    if period not in PERIOD_MAP:
        return None

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏: amount=XXXX –∏ ttl=YYY
    amount_override: Optional[float] = None
    ttl_minutes: Optional[int] = None

    amount_match = re.search(r"(?:^|\s)amount=(\d+(?:[.,]\d{1,2})?)\b", rest)
    ttl_match = re.search(r"(?:^|\s)ttl=(\d{1,5})\b", rest)

    if amount_match:
        amount_str = amount_match.group(1).replace(",", ".")
        try:
            amount_override = float(amount_str)
        except ValueError:
            amount_override = None
        rest = (rest[:amount_match.start()] + rest[amount_match.end():]).strip()

    if ttl_match:
        try:
            ttl_minutes = int(ttl_match.group(1))
        except ValueError:
            ttl_minutes = None
        rest = (rest[:ttl_match.start()] + rest[ttl_match.end():]).strip()

    comment = rest.strip() or None

    return {
        "tg_id": tg_id,                 # None –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω username
        "username": username,           # None –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω tg_id
        "period": period,
        "comment": comment,
        "amount_override": amount_override,
        "ttl_minutes": ttl_minutes,
    }


def _price_from_plan(user_plan, months: int) -> Optional[float]:
    """
    –ü–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –≤ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∞–π—Å–∞.
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è (–ø—Ä–∏–º–µ—Ä):
      rub_price_1_month, rub_price_3_months, rub_price_6_months, rub_price_12_months
    """
    mapping = {
        1: getattr(user_plan, "rub_price_1_month", None),
        3: getattr(user_plan, "rub_price_3_months", None),
        6: getattr(user_plan, "rub_price_6_months", None),
        12: getattr(user_plan, "rub_price_12_months", None),
    }
    val = mapping.get(months)
    if val is None:
        return None
    try:
        return float(val)
    except Exception:
        return None


@router.message(Command("paylink"))
async def cmd_paylink(
    message: types.Message,
    session: AsyncSession,
    settings: Settings,
):
    """
    –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É YooKassa –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:
      /paylink <tg_id|@username> <period> [comment] [amount=XXXX] [ttl=MIN]

    –ü–µ—Ä–∏–æ–¥—ã: 1m, 3m, 6m, 12m

    –ü—Ä–∞–≤–∏–ª–∞:
    - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω tg_id: —Ü–µ–Ω–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø—Ä–∞–π—Å-–ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å amount=...)
    - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω @username –ø–∞–Ω–µ–ª–∏: –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù –ø–∞—Ä–∞–º–µ—Ç—Ä amount=..., —Ç.–∫. –ø—Ä–∞–π—Å-–ø–ª–∞–Ω–∞ –≤ –ë–î –±–æ—Ç–∞ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å.
      –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ id_type=panel_username –∏ username=<–Ω–∏–∫>.
    """
    if not _is_admin(message.from_user.id, settings):
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    parsed = _parse_cmd(message.text or "")
    if not parsed:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/paylink <tg_id|@username> <period> [comment] [amount=XXXX] [ttl=MIN]\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "  /paylink 123456789 3m –ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω\n"
            "  /paylink @panel_nick 6m –û–ø–ª–∞—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ amount=3490\n"
            "  /paylink 123456789 12m VIP –∫–ª–∏–µ–Ω—Ç amount=4990 ttl=180"
        )
        return

    tg_id: Optional[int] = parsed["tg_id"]  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    username: Optional[str] = parsed["username"]  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    period: str = parsed["period"]  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–∑ PERIOD_MAP
    comment: Optional[str] = parsed["comment"]
    amount_override: Optional[float] = parsed["amount_override"]
    ttl_minutes: int = parsed["ttl_minutes"] or 120

    months = PERIOD_MAP[period]

    amount_rub: Optional[float] = None
    extra_metadata: Dict[str, object] = {
        "months": months,
        "admin_initiator_id": str(message.from_user.id),
    }

    # –†–µ–∂–∏–º 1: —É–∫–∞–∑–∞–Ω tg_id -> –±–µ—Ä—ë–º —Ü–µ–Ω—É –∏–∑ –ø—Ä–∞–π—Å-–ø–ª–∞–Ω–∞ (–∏–ª–∏ override)
    if tg_id is not None:
        user_plan = await get_or_init_user_price_plan(session, tg_id)
        if not user_plan:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å-–ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        amount_rub = amount_override or _price_from_plan(user_plan, months)
        if amount_rub is None:
            await message.answer("–¶–µ–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ tg_id (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â—ë)
        # –ù–æ –¥–ª—è –∞–¥–º–∏–Ω-–ª–∏–Ω–∫–æ–≤ –º—ã —Ç–µ–ø–µ—Ä—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –ø–æ –Ω–∏–∫—É –ø–∞–Ω–µ–ª–∏, –ø–æ—ç—Ç–æ–º—É tg_id –≤ metadata –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.
        # –û—Å—Ç–∞–≤–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –∑–∞–ø–∏—à–µ–º tg_id –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π.
        extra_metadata["tg_id"] = str(tg_id)

    # –†–µ–∂–∏–º 2: —É–∫–∞–∑–∞–Ω username –ø–∞–Ω–µ–ª–∏ -> –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω amount=...
    elif username:
        if amount_override is None:
            await message.answer(
                "–î–ª—è —Å—Å—ã–ª–æ–∫ –ø–æ –Ω–∏–∫—É –ø–∞–Ω–µ–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"/paylink @{username} {period} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π amount=1990"
            )
            return
        amount_rub = amount_override
        extra_metadata["id_type"] = "panel_username"
        extra_metadata["username"] = username  # —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (–±–µ–∑ @, lower)
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ tg_id –∏–ª–∏ @username –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
        return

    # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ YooKassa
    bot_username = message.bot.username if hasattr(message.bot, "username") else None
    yk = _get_yk_service(settings, bot_username)

    # 4) –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ —Å confirmation_url
    try:
        result = await yk.create_admin_payment_link(
            tg_id=tg_id or 0,  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ admin_link –ø–æ –Ω–∏–∫—É, –Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            period=period,
            amount_rub=amount_rub,
            comment=comment,
            ttl_minutes=ttl_minutes,
            receipt_email=None,
            receipt_phone=None,
            return_url_override=None,
            extra_metadata=extra_metadata,
        )
    except Exception as e:
        logging.exception("create_admin_payment_link failed")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return

    if not result or not result.get("confirmation_url"):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏).")
        return

    url = result["confirmation_url"]

    # –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Ä–µ–∂–∏–º–∞
    if tg_id is not None:
        header = f"üë§ tg_id: <code>{tg_id}</code>\n"
    else:
        header = f"üë§ username (–ø–∞–Ω–µ–ª—å): <b>@{username}</b>\n"

    await message.answer(
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n"
        + header +
        f"üì¶ –ø–µ—Ä–∏–æ–¥: <b>{period}</b>\n"
        f"üí∞ —Å—É–º–º–∞: <b>{amount_rub:.2f} RUB</b>\n"
        f"‚è≥ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ~{ttl_minutes} –º–∏–Ω.\n"
        + (f"üìù –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{comment}</i>\n" if comment else "")
        + "\n"
        f"{url}",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )
